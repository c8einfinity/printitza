<?php

namespace Designnbuy\Template\Model\Template;

use Designnbuy\Template\Model\Template;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;
use Magento\UrlRewrite\Model\OptionProvider;
use Magento\UrlRewrite\Model\UrlFinderInterface;
use Designnbuy\Template\Model\TemplateUrlRewriteGenerator;
use Designnbuy\Template\Model\TemplateUrlPathGenerator;
use Magento\UrlRewrite\Service\V1\Data\UrlRewriteFactory;
use Magento\Store\Model\StoreManagerInterface;

/**
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 */
class CurrentUrlRewritesRegenerator
{
    /** @var Template */
    protected $template;

    /** @var UrlFinderInterface */
    protected $urlFinder;

    /** @var TemplateUrlPathGenerator */
    protected $templateUrlPathGenerator;

    /** @var UrlRewriteFactory */
    protected $urlRewriteFactory;

    /**
     * @param UrlFinderInterface $urlFinder
     * @param TemplateUrlPathGenerator $templateUrlPathGenerator
     * @param UrlRewriteFactory $urlRewriteFactory
     */
    public function __construct(
        UrlFinderInterface $urlFinder,
        TemplateUrlPathGenerator $templateUrlPathGenerator,
        UrlRewriteFactory $urlRewriteFactory
    ) {
        $this->urlFinder = $urlFinder;
        $this->templateUrlPathGenerator = $templateUrlPathGenerator;
        $this->urlRewriteFactory = $urlRewriteFactory;
    }

    /**
     * Generate list based on current rewrites
     *
     * @param int $storeId
     * @param Template $template
     * @return UrlRewrite[]
     */
    public function generate($storeId, Template $template)
    {
        $this->template = $template;

        $currentUrlRewrites = $this->urlFinder->findAllByData(
            [
                UrlRewrite::STORE_ID => $storeId,
                UrlRewrite::ENTITY_ID => $this->template->getId(),
                UrlRewrite::ENTITY_TYPE => TemplateUrlRewriteGenerator::ENTITY_TYPE,
            ]
        );

        $urlRewrites = [];
        foreach ($currentUrlRewrites as $currentUrlRewrite) {
            $url = $currentUrlRewrite->getIsAutogenerated()
                ? $this->generateForAutogenerated($currentUrlRewrite, $storeId)
                : $this->generateForCustom($currentUrlRewrite, $storeId);
            $urlRewrites = array_merge($urlRewrites, $url);
        }

        $this->template = null;
        return $urlRewrites;
    }

    /**
     * @param UrlRewrite $url
     * @param int $storeId
     * @return array
     */
    protected function generateForAutogenerated($url, $storeId)
    {
        if (!$this->template->getData('save_rewrites_history')) {
            return [];
        }
        $targetPath = $this->templateUrlPathGenerator->getUrlPathWithSuffix($this->template, $storeId);
        if ($url->getRequestPath() === $targetPath) {
            return [];
        }
        return [
            $this->urlRewriteFactory->create()
                ->setEntityType(TemplateUrlRewriteGenerator::ENTITY_TYPE)
                ->setEntityId($this->template->getId())
                ->setRequestPath($url->getRequestPath())
                ->setTargetPath($targetPath)
                ->setRedirectType(OptionProvider::PERMANENT)
                ->setStoreId($storeId)
                ->setDescription($url->getDescription())
                ->setIsAutogenerated(0)
                ->setMetadata($url->getMetadata())
        ];
    }

    /**
     * @param UrlRewrite $url
     * @param int $storeId
     * @return array
     */
    protected function generateForCustom($url, $storeId)
    {
        $targetPath = $url->getRedirectType()
            ? $this->templateUrlPathGenerator->getUrlPathWithSuffix($this->template, $storeId)
            : $url->getTargetPath();
        if ($url->getRequestPath() === $targetPath) {
            return [];
        }
        return [
            $this->urlRewriteFactory->create()
                ->setEntityType(TemplateUrlRewriteGenerator::ENTITY_TYPE)
                ->setEntityId($this->template->getId())
                ->setRequestPath($url->getRequestPath())
                ->setTargetPath($targetPath)
                ->setRedirectType($url->getRedirectType())
                ->setStoreId($storeId)
                ->setDescription($url->getDescription())
                ->setIsAutogenerated(0)
                ->setMetadata($url->getMetadata())
        ];
    }
}
